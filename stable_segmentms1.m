%This code is set up specifically to compute stable segmentations for
%object recognition. It computes the most stable segmentation for each
%value of k (2 to max_num_seg). Alternatively, it can be easily changed to
%return some number of most stable segmentation irrespective of k, or all
%stable segmentations above some threshold tau. 
%This implementation uses texture and brightness cues from grayscale images. Addition 
%of color and even motion cues, is straight forward. 

%The code contains a number of mex files, which are precompiled for Windows, Linux 32 bit and 
%AMD 64 bit. 
%If you need to recompile from source, or need to compile for another architecture, 
%follow the step below: 
%1.compileDir
%The mex files are generated by Timothy Cour. I don't believe they'll
%compile on a Mac OS 10.4 right away.
%Andrew Rabinovich.amrabino@ucsd.edu

%function segmentations=stable_segmentms(input_fname,max_num_seg)
function [segmentations, stabilities]=stable_segmentms1(flow_xy, max_num_seg, extend)

addpath(genpath(pwd));
sigma=0.01;
anchor=4;
%max_iter=20;
max_iter=10;


my_test = 0; %%% possible extension to higher order features (x and y directional flow)--> 2(n) color channels in an image
my_test2 = 1; %%% my new feature (x and y directional flow) ---> two images with 1 color channel each
show_all_segments = 1;

if (1 == extend)
    my_test = 0;
    my_test2 = 0;
end

[x,y,z]=size(flow_xy);


if(1 == extend)
    stack_image = flow_xy;
    [x y ch] = size(stack_image);
    for r = 1:ch
        image(:,:,r)= double(stack_image(:,:,r));
        image=image./max(image(:));  
    end    
elseif (my_test == 0)     
    if(z>1)
        image=rgb2gray(flow_xy);
    end
    image=im2double(image);
    image=image./max(image(:));

    %%%% subarna: debug
%     if(x*y>250000)
%         image = imresize(image, 0.5, 'bicubic');
%     end
end

if (1 == my_test2) 
    image1 = im2double(flow_xy(:,:,1));
    image2 = im2double(flow_xy(:,:,2));
    image1=image1./max(image1(:));
    image2=image2./max(image2(:));
 
        %%%% subarna: debug
%     if(x*y>250000)
%         image1 = imresize(image1, 0.5, 'bicubic');
%         image2 = imresize(image2, 0.5, 'bicubic');
%     end
    image(:,:,1) = image1;
    image(:,:,2) = image2;
end

%[x,y,z]=size(image);
if (0 == extend)
    if (0 == my_test2)
        figure(1000), imshow(image), title('gray optic flow features');
    else
        figure(1001), imshow(image1), title('horz optic flow features');
        figure(1002), imshow(image2), title('vert optic flow features');
        %pause
    end
end

for nsegs = 2:max_num_seg  %%%% test only for max_num_seg
    fprintf('\nk=%d',nsegs);
    %this is only for two cues (texture and brightness, but easily extends to arbitrary #)
    cc=0;
    %%% subarna
    for pvec = 0.9:0.9    %for(pvec=0.1:0.1:.9) %p=0 is texture, p=1 is intensity
        fprintf('\ncue combination: %f, iteration:',pvec);
        cc=cc+1;
        for iter=1:max_iter
            fprintf(' %d',iter) 
            if (extend == 1)
                for r = 1:ch
                    image_new(:,:,r)=add_noise(image(:,:,r), sigma);
                end
                [classes,X,lambda,Xr,W,C] = ncut_multiscale(image_new,nsegs,pvec);
            elseif (my_test2 == 1)  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                image_x=add_noise(image1,sigma);  
                image_y=add_noise(image2,sigma);  
                [classes,X,lambda,Xr,W,C] = ncut_multiscale1(image_x, image_y,nsegs,pvec);    
            elseif (my_test == 1)
                image_new(:,:,1)=add_noise(image(:,:,1), sigma);
                image_new(:,:,2)=add_noise(image(:,:,2), sigma);
                [classes,X,lambda,Xr,W,C] = ncut_multiscale(image_new,nsegs,pvec);
            else
                %%%% original code
                image_new=add_noise(image, sigma);
                [classes,X,lambda,Xr,W,C] = ncut_multiscale(image_new,nsegs,pvec);
            end
            
            %labels{iter}=classes;
            labels_strung{iter}=classes(:);
        end
        
              
        labels_new=hungarian_driver(labels_strung,nsegs,anchor);
          
        stability(cc)=comp_clust(labels_new,nsegs);
        lbs{cc}=reshape(labels_new(:,anchor),[x,y]);
    end
    [max_stability,cc_pos]=max(stability);
    segmentations{nsegs-1}=lbs{cc_pos}; %max_num_seg-1 segmentations are returned
    stabilities(nsegs-1) = stability(cc);  
    
    %stability
    %pause
end

if (1 == show_all_segments)
    %%%%% show all segments
    num_segments = size(segmentations,2);
    fprintf('\n');
    for seg = 1:num_segments
        figure;
        imagesc(cell2mat(segmentations(seg)))
        fprintf('stability of seg# %d = %f\n', seg+1, stabilities(seg));
        RGB = label2rgb(cell2mat(segmentations(seg)));
        file_name = sprintf('%d_seg.ppm', seg);
        imwrite(RGB, file_name, 'ppm');
        %pause
    end
end
